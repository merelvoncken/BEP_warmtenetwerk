# -*- coding: utf-8 -*-
"""
Created on Thu Nov  2 12:40:52 2023

@author: merel
"""
#%%importeren van technieken

import osmnx as ox
import networkx as nx
import matplotlib.pyplot as plt
from math import dist
from scipy.spatial.distance import euclidean
from shapely.geometry import Point
from shapely.geometry import LineString
from scipy.spatial.distance import cdist
from sklearn.cluster import KMeans

#%%
pointA=(50.971480, 5.805104)

G = ox.graph_from_point(pointA, dist=10000, simplify=False) #Verzamel informatie uit openstreetmap en zet in een graaf
G = ox.project_graph(G) #zet de coordinaten van de graaf om naar UTM
ox.plot_graph(G,node_size=0) #plot de graaf 

nodes, _ = ox.graph_to_gdfs(G)
coordinates = nodes[['y', 'x']].values

# Specify the number of clusters (you can adjust this based on your needs)
num_clusters = 5

# Use KMeans clustering to cluster the street coordinates
kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(coordinates)

# Add cluster labels to the nodes DataFrame
nodes['cluster'] = kmeans.labels_

fig, ax = ox.plot_graph(G, node_size=0, show=False, close=False)
for cluster in range(num_clusters):
    cluster_nodes = nodes[nodes['cluster'] == cluster]
    ax.scatter(cluster_nodes['x'], cluster_nodes['y'], label=f'Cluster {cluster + 1}')

plt.legend()
plt.show()
#%% Voorbereiden euclidean

lengte={}
edge_attributes={}
coord_street_nodes={}

for i in G.nodes():
    coord_street_nodes[i]=G.nodes[i]["x"], G.nodes[i]['y']
    
for i,j in G.edges():
    lengte[(i,j)]=(dist(coord_street_nodes[i],coord_street_nodes[j]))
    
edge_attributes = {(i, j, "weight"): value for (i, j), value in lengte.items()}

G = G.to_undirected() #maak graaf undirected

#%% voeg edges toe aan losse graven per cluster
cluster_0=nx.Graph()
cluster_1=nx.Graph()
cluster_2=nx.Graph()
cluster_3=nx.Graph()
cluster_4=nx.Graph()
cluster_lst=[cluster_0,cluster_1,cluster_2,cluster_3, cluster_4]

for u,v,w in G.edges:
    cluster_u = nodes.at[u, 'cluster']
    cluster_v = nodes.at[v, 'cluster']
    if max(cluster_u, cluster_v)==0:
        cluster_0.add_node(u)
        cluster_0.add_node(v)
        cluster_0.add_edge(u,v)
    if max(cluster_u, cluster_v)==1:
        cluster_1.add_node(u)
        cluster_1.add_node(v)
        cluster_1.add_edge(u,v)
    if max(cluster_u, cluster_v)==2:
        cluster_2.add_node(u)
        cluster_2.add_node(v)
        cluster_2.add_edge(u,v)
    if max(cluster_u, cluster_v)==3:
        cluster_3.add_node(u)
        cluster_3.add_node(v)
        cluster_3.add_edge(u,v)
    if max(cluster_u, cluster_v)==4:
        cluster_4.add_node(u)
        cluster_4.add_node(v)
        cluster_4.add_edge(u,v)

        
nx.draw_networkx(cluster_0, coord_street_nodes, node_size=3, with_labels=False)

#%% Maak een euler pad per cluster en voeg deze circuits toe aan een graaf

U=nx.Graph()

for i in cluster_lst:
    i = nx.eulerize(i) #maak extra lijnen in de graaf om elke knoop evenveel graden te geven 
    

    # maak eulercircuit
    if nx.is_eulerian(i):
        EU = list(nx.eulerian_circuit(i))
        
    U.add_nodes_from(i.nodes())

    U.add_edges_from(EU)

nx.draw_networkx(U, coord_street_nodes, node_size=1, with_labels=False)
